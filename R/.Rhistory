}))
dtp_2 = 4
od2 = as.matrix(a2[,-(1:dtp_2)])
blanks <- colMeans(a2[a2$plasmid == "blank", -(1:dtp_2)])
real_od2 = as.data.frame(t(apply(od2, 1, function(x){
x - blanks
})))
## Add plasmid infos
pl2id_1 = read.xls("~/Desktop/mapping_allostery/data/experimental_validations/Binding/plasmid2id_suppfig.xlsx",sheet = 1, header = TRUE)
pl2id_1 <- pl2id_1[, 1:4]
## Add plasmid infos
pl2id_1 = read.xls("~/Desktop/mapping_allostery/data/experimental_validations/Binding/plasmid2id_suppfig.xlsx",sheet = 1, header = TRUE)
pl2id_1 <- pl2id_1[, 1:4]
pl2id_2 = read.xls("~/Desktop/mapping_allostery/data/experimental_validations/Abundance/plasmid2id_suppfig.xlsx",sheet = 1, header = TRUE)
pl2id_2 <- pl2id_2[, 1:3]
# Create file with real ODs and plasmid name
ds1 = data.frame(real_od1)
ds1$plasmid = a1$plasmid
ds1$well = paste(a1$row, a1$column, sep = "")
ds1 = ds1[!(ds1$plasmid == "blank"),]
DS1 = merge(ds1, pl2id_1, by.x = "plasmid", by.y="plasmid_short")
DS1
View(DS1)
DS_melt1 = melt(DS1, id.vars = c("plasmid_long","domain", "assay", "well", "plasmid"))
DS_melt1$time = sapply(as.character(DS_melt1$variable), function(x){as.numeric(substr(x,2,nchar(x)))/3600})
DS_melt1 = DS_melt1[, c("plasmid_long","domain", "assay", "well","variable", "value", "time")]
colnames(DS_melt1) <- c("plasmid","domain", "assay", "well","variable", "value", "time")
DS_melt1
View(DS_melt1)
ds2 = data.frame(real_od2)
ds2$plasmid = a2$plasmid
ds2$well = paste(a2$row, a2$column, sep = "")
ds2 = ds2[!(ds2$plasmid == "blank"),]
DS2 = merge(ds2, pl2id_2, by = "plasmid")
DS2
pl2id_2
DS2
pl2id_2
ds2$plasmid
pl2id_2
ds2
ds2 = data.frame(real_od2)
ds2$plasmid = a2$plasmid
ds2$well = paste(a2$row, a2$column, sep = "")
ds2 = ds2[!(ds2$plasmid == "blank"),]
DS2 = merge(ds2, pl2id_2, by = "plasmid")
View(DS2)
DS_melt2 = melt(DS2, id.vars = c("plasmid","domain", "assay", "well"))
DS_melt2$time = sapply(as.character(DS_melt2$variable), function(x){as.numeric(substr(x,2,nchar(x)))/3600})
## Calculate Growth rate (slope of linear fit on exponential phase)
gr1 <- do.call("rbind", lapply(unique(DS_melt1$well), function(x){
ds = DS_melt1[DS_melt1$well == x,]
mid_od = max(ds$value)/2
time_od50 = max(ds$time[ds$value <= mid_od])
lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
lmds$ods = log(ds$value[ds$time %in% lmds$t])
lmfit = lm(formula = ods ~ t, data = lmds)
data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
gr2 <- do.call("rbind", lapply(unique(DS_melt2$well), function(x){
ds = DS_melt2[DS_melt2$well == x & DS_melt2$time <= 50,]
mid_od = max(ds$value)/2
time_od50 = max(ds$time[ds$value <= mid_od])
lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
lmds$ods = log(ds$value[ds$time %in% lmds$t])
lmfit = lm(formula = ods ~ t, data = lmds)
data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
gr <- rbind(gr1[!gr1$domain == "Neg control 2",], gr2)
gr$domain <- factor(gr$domain, levels = c("Pos control", "GRB2", "M46W", "M46L", "F7H", "Y51R", "P48H", "Y51S", "Y51D", "Neg control"))
dodge <- position_dodge(width = 0.7)
panel_A <- ggplot(gr, aes(x=domain, y=growth_rate_slope, fill = assay, color=assay)) +
geom_boxplot(width = 0.7, position = dodge) + geom_point(aes(fill=assay),position = position_jitterdodge(), alpha = 0.6, show.legend = F) +
xlab("variant") + ylab("Growth rate") +
scale_fill_manual("", values = c("#c8b0d3", "#fbc98e")) +
scale_color_manual("", values = c(col_purple, col_orange)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.direction = "horizontal", legend.position = "top")
panel_A
write.table(DS2, file = "~/Desktop/mapping_allostery/data/experimental_validations/Abundance/experimenal_validations_ODs.txt", quote = F)
DS2
View(DS2)
write.table(DS_melt2, file = "~/Desktop/mapping_allostery/data/experimental_validations/Abundance/experimenal_validations_ODs.txt", quote = F)
DS1 = merge(ds1, pl2id_1, by.x = "plasmid", by.y="plasmid_short")
DS_melt1 = melt(DS1, id.vars = c("plasmid_long","domain", "assay", "well", "plasmid"))
DS_melt1$time = sapply(as.character(DS_melt1$variable), function(x){as.numeric(substr(x,2,nchar(x)))/3600})
DS_melt1 = DS_melt1[, c("plasmid_long","domain", "assay", "well", "value", "time")]
colnames(DS_melt1) <- c("plasmid","domain", "assay", "well", "od600", "time")
DS_melt1
DS_melt2
colnames(DS_melt1) <- c("plasmid","genotype", "pca_type", "well", "od600", "time")
DS2 = merge(ds2, pl2id_2, by = "plasmid")
DS_melt2 = melt(DS2, id.vars = c("plasmid","domain", "assay", "well"))
DS_melt2$time = sapply(as.character(DS_melt2$variable), function(x){as.numeric(substr(x,2,nchar(x)))/3600})
DS_melt2 = DS_melt2[, c("plasmid","domain", "assay", "well", "value", "time")]
colnames(DS_melt2) <- c("plasmid","genotype", "pca_type", "well", "od600", "time")
DS_melt2
write.table(DS_melt2, file = "~/Desktop/mapping_allostery/data/experimental_validations/Abundance/experimenal_validations_ODs.txt", quote = F)
DS_melt2$pca_type <- gsub("deepPCA", "Binding", gsub("stabilityPCA", "Abundance", DS_melt2$pca_type))
DS_melt2$pca_type
DS_melt1$pca_type <- gsub("deepPCA", "Binding", gsub("stabilityPCA", "Abundance", DS_melt1$pca_type))
DS_melt1$pca_type
DS <- rbind(DS_melt1, DS_melt2)
write.table(DS, file = "~/Desktop/mapping_allostery/data/experimental_validations/experimenal_validations_ODs.txt", quote = F)
DS_melt2$date <- "20181210"
paste(DS_melt2$date, DS_melt2$well)
paste(DS_melt2$date, DS_melt2$well, sep="_")
DS_melt2$date_well <- paste(DS_melt2$date, DS_melt2$well, sep="_")
DS_melt1$date <- "20181016"
DS_melt1$date_well <- paste(DS_melt1$date, DS_melt1$well, sep="_")
DS <- rbind(DS_melt1, DS_melt2)
DS
write.table(DS, file = "~/Desktop/mapping_allostery/data/experimental_validations/experimenal_validations_ODs.txt", quote = F)
library(data.table)
library(reshape2)
library(ggplot2)
library(gridExtra)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
# val_inpath = file.path(base_dir, "Data", "experimental_validations", "GRB2-SH3")
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
View(doubledeepms__fraction_folded)
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
View(doubledeepms__aa_properties_pca_singles_loadings)
fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt")
fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
test <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
View(test)
DS <- rbind(DS_melt1, DS_melt2)
write.table(DS, file = "~/Desktop/mapping_allostery/data/experimental_validations/experimenal_validations_ODs.txt", quote = F, sep = "\t")
test <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
vaÃ±_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
val_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
val_dt
val_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt", header = T)
val_dt
val_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt")
val_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt",
header = T)
fwrite(DS, file = "~/Desktop/mapping_allostery/data/experimental_validations/experimenal_validations_ODs.txt", quote = F)
val_dt <- fread(input = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj/Data/experimental_validations/GRB2-SH3/experimenal_validations_ODs.txt",
header = T)
View(val_dt)
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[well == x,]
head(ds)
# mid_od = max(ds$value)/2
# time_od50 = max(ds$time[ds$value <= mid_od])
# lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
# lmds$ods = log(ds$value[ds$time %in% lmds$t])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
#            start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
head(ds)
# mid_od = max(ds$value)/2
# time_od50 = max(ds$time[ds$value <= mid_od])
# lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
# lmds$ods = log(ds$value[ds$time %in% lmds$t])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
#            start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[value <= max(ds$value)/2, time])
print(time_od50)
# lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
# lmds$ods = log(ds$value[ds$time %in% lmds$t])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
#            start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
print(time_od50)
# lmds = data.frame(t = ds$time[ds$time <= time_od50+2 & ds$time >= time_od50-2])
# lmds$ods = log(ds$value[ds$time %in% lmds$t])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
#            start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
# lmds$ods = log(ds$value[ds$time %in% lmds$t])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(plasmid = unique(ds$plasmid), well = x, domain = unique(ds$domain), assay = unique(ds$assay),
#            start_od = min(ds$value), mid_od = mid_od, start_time = min(ds$time), time_od50 = time_od50, growth_rate_slope = lmfit$coefficients[2])
}))
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
# val_inpath = file
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
# val_inpath = file
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
fitness_list = list(
"PSD95-PDZ3" = file.path(base_dir, "Data", "fitness", "PSD95-PDZ3"),
"GRB2-SH3" = file.path(base_dir, "Data", "fitness", "GRB2-SH3"))
structure_metrics_list = list(
"PSD95-PDZ3" = file.path(base_dir, paste0("002", "_doubledeepms_structure_metrics_PSD95-PDZ3"), "dg_singles.txt"),
"GRB2-SH3" = file.path(base_dir, paste0("002", "_doubledeepms_structure_metrics_GRB2-SH3"), "dg_singles.txt"))
scatter_examples_list = list(
"GRB2-SH3" = c("Abundance", "singles", "rep2", "rep1"),
"PSD95-PDZ3" = c("Binding", "doubles", "rep2", "rep3"))
val_inpath = file.path(base_dir, "Data", "experimental_validations", "GRB2-SH3", "experimenal_validations_ODs.txt")
outpath = doubledeepms__format_dir(dir_suffix="_doubledeepms_fitness_plots", stagenum=stagenum, base_dir=base_dir)
stagenum <- 3
outpath = doubledeepms__format_dir(dir_suffix="_doubledeepms_fitness_plots", stagenum=stagenum, base_dir=base_dir)
colour_scheme = colour_scheme
colour_scheme <- list(
"shade 0" = list(
"#F4270C",
"#F4AD0C",
"#1B38A6",
"#09B636"),
"shade 1" = list(
"#FFB0A5",
"#FFE4A5",
"#9DACE3",
"#97E9AD"),
"shade 2" = list(
"#FF6A56",
"#FFCB56",
"#4C63B7",
"#43C766"),
"shade 3" = list(
"#A31300",
"#A37200",
"#0C226F",
"#007A20"),
"shade 4" = list(
"#410800",
"#412D00",
"#020B2C",
"#00300D"))
#First and last analysis stages
first_stage <- startStage
last_stage <- stopStage
colour_scheme = colour_scheme
execute = (first_stage <= stagenum & (last_stage == 0 | last_stage >= stagenum))
#Load fitness and metrics data
fit_list <- list()
for(protein in names(fitness_list)){
fit_list[[protein]] <- list()
#Structure metrics
metrics_dt <- unique(fread(structure_metrics_list[[protein]])[,.(Pos, Pos_class)])
for(pca_type in c("Abundance", "Binding")){
rdata_file <- list.files(file.path(fitness_list[[protein]], pca_type))
load(file.path(fitness_list[[protein]], pca_type, rdata_file))
all_variants[, protein := protein]
all_variants[, pca_type := pca_type]
#Single mutant position
wt_seq <- unlist(strsplit(all_variants[WT==T,aa_seq], ""))
#Single mutant position class
all_variants[Nham_aa==1, Pos := which(unlist(strsplit(aa_seq, "")) != wt_seq), aa_seq]
all_variants <- merge(all_variants, metrics_dt, by = "Pos", all = T)
fit_list[[protein]][[pca_type]] <- all_variants
}
}
fitness_dt <- rbindlist(unlist(fit_list, recursive = FALSE), fill = T)
fitness_dt
#Load fitness and metrics data
fit_list <- list()
for(protein in names(fitness_list)){
fit_list[[protein]] <- list()
#Structure metrics
metrics_dt <- unique(fread(structure_metrics_list[[protein]])[,.(Pos, Pos_class)])
for(pca_type in c("Abundance", "Binding")){
rdata_file <- list.files(file.path(fitness_list[[protein]], pca_type))
load(file.path(fitness_list[[protein]], pca_type, rdata_file))
all_variants[, protein := protein]
all_variants[, pca_type := pca_type]
#Single mutant position
wt_seq <- unlist(strsplit(all_variants[WT==T,aa_seq], ""))
#Single mutant position class
all_variants[Nham_aa==1, Pos := which(unlist(strsplit(aa_seq, "")) != wt_seq), aa_seq]
all_variants[Nham_aa==1, WT_AA := wt_seq[Pos], aa_seq]
all_variants[Nham_aa==1, Mut := substr(aa_seq, Pos, Pos), aa_seq]
all_variants <- merge(all_variants, metrics_dt, by = "Pos", all = T)
fit_list[[protein]][[pca_type]] <- all_variants
}
}
fitness_dt <- rbindlist(unlist(fit_list, recursive = FALSE), fill = T)
fitness_dt
unique(fitness_dt$Nham_aa)
singles_dt <- fitness_dt[Nham_aa <= 1,]
singles_dt
View(singles_dt)
fitness_dt[, id := paste0(WT_AA, Pos, Mut)]
val_dt
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
lmfit = lm(formula = ods ~ t, data = lmds)
data.frame(genotype = unique(ds$genotype),
pca_type = unique(ds$pca_type),
growth_rate_slope = lmfit$coefficients[2],
date_well = x)
}))
singles_dt[WT == T, id := "GRB2"]
View(singles_dt)
singles_dt[, id := paste0(WT_AA, Pos, Mut)]
singles_dt[WT == T & protein == "GRB2-SH3", id := "GRB2"]
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
lmfit = lm(formula = ods ~ t, data = lmds)
data.frame(genotype = unique(ds$genotype),
pca_type = unique(ds$pca_type),
growth_rate_slope = lmfit$coefficients[2],
date_well = x)
}))
singles_dt <- fitness_dt[Nham_aa <= 1 & protein == "GRB2-SH3",]
singles_dt[, id := paste0(WT_AA, Pos, Mut)]
singles_dt[WT == T, id := "GRB2"]
gr
val_dt
lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(genotype = unique(ds$genotype),
#            pca_type = unique(ds$pca_type),
#            growth_rate_slope = lmfit$coefficients[2],
#            date_well = x)
})
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(genotype = unique(ds$genotype),
#            pca_type = unique(ds$pca_type),
#            growth_rate_slope = lmfit$coefficients[2],
#            date_well = x)
}))
date_well
val_dt
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(genotype = unique(ds$genotype),
#            pca_type = unique(ds$pca_type),
#            growth_rate_slope = lmfit$coefficients[2],
#            date_well = x)
}))
lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
# lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(genotype = unique(ds$genotype),
#            pca_type = unique(ds$pca_type),
#            growth_rate_slope = lmfit$coefficients[2],
#            date_well = x)
})
lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = ds[time <= time_od50+2 & time >= time_od50-2, od600])
lmfit = lm(formula = ods ~ t, data = lmds)
# data.frame(genotype = unique(ds$genotype),
#            pca_type = unique(ds$pca_type),
#            growth_rate_slope = lmfit$coefficients[2],
#            date_well = x)
})
do.call("rbind", lapply(unique(val_dt$date_well), function(x){
ds = val_dt[date_well == x,]
time_od50 = max(ds[od600 <= max(ds$od600)/2, time])
lmds = data.frame(t = ds[time <= time_od50+2 & time >= time_od50-2, time],
ods = log(ds[time <= time_od50+2 & time >= time_od50-2, od600]))
lmfit = lm(formula = ods ~ t, data = lmds)
data.frame(genotype = unique(ds$genotype),
pca_type = unique(ds$pca_type),
growth_rate_slope = lmfit$coefficients[2],
date_well = x)
}))
gr_mean <- aggregate(growth_rate_slope ~ genotype+pca_type, data=gr[, c("growth_rate_slope", "genotype", "pca_type")], FUN = mean)
gr_mean <- aggregate(growth_rate_slope ~ genotype+pca_type, data=gr[, ..("growth_rate_slope", "genotype", "pca_type")], FUN = mean)
gr_mean <- aggregate(growth_rate_slope ~ genotype+pca_type, data=gr[, ..c("growth_rate_slope", "genotype", "pca_type")], FUN = mean)
gr[, .(growth_rate_slope, genotype, pca_type)]
library(data.table)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
base_dir = "~/Dropbox/doubledeep_manuscript/Results/doubledeepms_proj"
startStage = 3
stopStage = 3
doubledeepms(startStage = startStage,
stopStage = stopStage,
base_dir = base_dir)
filelist <- list.files("~/Develop/doubledeepms/R/")
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
library(data.table)
library(reshape2)
library(ggplot2)
library(gridExtra)
filelist <- list.files("~/Develop/doubledeepms/R/")
filelist
invisible(sapply(paste0("~/Develop/doubledeepms/R/", filelist), source, .GlobalEnv))
paste0("~/Develop/doubledeepms/R/", filelist)
